# db.py - –§–∞–π–ª —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

import psycopg2
from dotenv import load_dotenv
import os
import psycopg2.errors

load_dotenv()

DB_NAME = os.getenv("DB_NAME")
DB_USER = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")
DB_HOST = os.getenv("DB_HOST")
DB_PORT = os.getenv("DB_PORT")

db_params = {
    "database": DB_NAME,
    "user": DB_USER,
    "password": DB_PASSWORD,
    "host": DB_HOST,
    "port": DB_PORT
}


def create_database(params):
    """
    –°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    
    Args:
        params (dict): –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL.
    """
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ postgres –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ë–î
    conn_params = params.copy()
    conn_params['database'] = 'postgres'  # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ postgres
    
    conn = None
    cur = None
    db_name = params['database']
    
    try:
        conn = psycopg2.connect(**conn_params)
        conn.autocommit = True  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–º–∏—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ë–î
        cur = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        cur.execute("SELECT 1 FROM pg_database WHERE datname = %s", (db_name,))
        exists = cur.fetchone()
        
        if not exists:
            print(f"üîß –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö {db_name}...")
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            cur.execute(f"CREATE DATABASE {db_name}")
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
        else:
            print(f"‚ÑπÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        if cur:
            cur.close()
        if conn:
            conn.close()


def create_tables(params):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.
    
    Args:
        params (dict): –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL.
    """
    conn = None
    cur = None
    
    try:
        conn = psycopg2.connect(**params)
        cur = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É employers (—Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–∏)
        create_employers_table = """
        CREATE TABLE IF NOT EXISTS employers (
            employer_id VARCHAR(50) PRIMARY KEY,
            employer_name VARCHAR(255) NOT NULL,
            employer_url VARCHAR(255),
            open_vacancies INTEGER
        );
        """
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É vacancies (–≤–∞–∫–∞–Ω—Å–∏–∏)
        create_vacancies_table = """
        CREATE TABLE IF NOT EXISTS vacancies (
            vacancy_id VARCHAR(50) PRIMARY KEY,
            employer_id VARCHAR(50) REFERENCES employers(employer_id),
            title VARCHAR(255) NOT NULL,
            salary_from INTEGER,
            salary_to INTEGER,
            salary_currency VARCHAR(10),
            url VARCHAR(255)
        );
        """
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        cur.execute(create_employers_table)
        cur.execute(create_vacancies_table)
        
        # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã 'employers' –∏ 'vacancies' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã (–∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        if conn:
            conn.rollback()
    finally:
        if cur:
            cur.close()
        if conn:
            conn.close()


class DBManager:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –≤—ã–±–æ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL.
    """

    def __init__(self, params):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.

        Args:
            params (dict): –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î.
        """
        self.params = params

    def get_companies_and_vacancies_count(self):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–ø–∞–Ω–∏–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π —É –∫–∞–∂–¥–æ–π.

        Returns:
            list: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π).
        """
        conn = None
        cur = None
        results = []

        try:
            conn = psycopg2.connect(**self.params)
            cur = conn.cursor()

            sql_query = """
                SELECT e.employer_name, COUNT(v.vacancy_id)
                FROM employers e
                LEFT JOIN vacancies v ON e.employer_id = v.employer_id
                GROUP BY e.employer_name
                ORDER BY COUNT(v.vacancy_id) DESC;
            """
            cur.execute(sql_query)
            results = cur.fetchall()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ 'get_companies_and_vacancies_count': {e}")
            results = []

        finally:
            if cur:
                cur.close()
            if conn:
                conn.close()

        return results

    def get_all_vacancies(self):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ –ë–î —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏, –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏,
        –∑–∞—Ä–ø–ª–∞—Ç—ã –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é.

        Returns:
            list: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –≤–∞–∫–∞–Ω—Å–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–ø–∞–Ω–∏–∏.
        """
        conn = None
        cur = None
        results = []

        try:
            conn = psycopg2.connect(**self.params)
            cur = conn.cursor()

            sql_query = """
                SELECT v.vacancy_id, e.employer_name, v.title, v.salary_from, v.salary_to, 
                       v.salary_currency, v.url
                FROM vacancies v
                JOIN employers e ON v.employer_id = e.employer_id;
            """
            cur.execute(sql_query)
            results = cur.fetchall()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ 'get_all_vacancies': {e}")
            results = []

        finally:
            if cur:
                cur.close()
            if conn:
                conn.close()

        return results

    def get_vacancies_with_salary(self):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π.

        Returns:
            list: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –≤–∞–∫–∞–Ω—Å–∏–π —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π.
        """
        conn = None
        cur = None
        results = []

        try:
            conn = psycopg2.connect(**self.params)
            cur = conn.cursor()

            sql_query = """
                SELECT *
                FROM vacancies
                WHERE salary_from IS NOT NULL OR salary_to IS NOT NULL;
            """
            cur.execute(sql_query)
            results = cur.fetchall()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ 'get_vacancies_with_salary': {e}")
            results = []

        finally:
            if cur:
                cur.close()
            if conn:
                conn.close()

        return results

    def get_vacancies_with_keyword(self, keyword):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π, –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.

        Args:
            keyword (str): –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏.

        Returns:
            list: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –≤–∞–∫–∞–Ω—Å–∏–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.
        """
        conn = None
        cur = None
        results = []

        try:
            conn = psycopg2.connect(**self.params)
            cur = conn.cursor()

            # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
            # ILIKE %s - –∏—â–µ—Ç –ø–æ–¥—Å—Ç—Ä–æ–∫—É –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞. %s - –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä.
            sql_query = """
                SELECT *
                FROM vacancies
                WHERE title ILIKE %s;
            """
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å —Å–∏–º–≤–æ–ª–∞–º–∏ % –≤–æ–∫—Ä—É–≥ –Ω–µ–≥–æ
            # –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            search_keyword = f"%{keyword}%"

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å, –ø–µ—Ä–µ–¥–∞–≤–∞—è SQL-—Å—Ç—Ä–æ–∫—É –∏ –ö–û–†–¢–ï–ñ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
            cur.execute(sql_query, (search_keyword,)) # <-- **–í–ê–ñ–ù–û!** –ü–µ—Ä–µ–¥–∞–µ–º (search_keyword,) –∫–∞–∫ –∫–æ—Ä—Ç–µ–∂!

            results = cur.fetchall()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ 'get_vacancies_with_keyword': {e}")
            results = []

        finally:
            if cur:
                cur.close()
            if conn:
                conn.close()

        return results
        
    def get_avg_salary(self):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ä–µ–¥–Ω—é—é –∑–∞—Ä–ø–ª–∞—Ç—É –ø–æ –≤—Å–µ–º –≤–∞–∫–∞–Ω—Å–∏—è–º.
        –£—á–∏—Ç—ã–≤–∞–µ—Ç –∫–∞–∫ –Ω–∏–∂–Ω—é—é (salary_from), —Ç–∞–∫ –∏ –≤–µ—Ä—Ö–Ω—é—é (salary_to) –≥—Ä–∞–Ω–∏—Ü—ã –∑–∞—Ä–ø–ª–∞—Ç—ã.

        Returns:
            float: –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –ø–æ –≤—Å–µ–º –≤–∞–∫–∞–Ω—Å–∏—è–º –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.
        """
        conn = None
        cur = None
        avg_salary = None

        try:
            conn = psycopg2.connect(**self.params)
            cur = conn.cursor()

            # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã
            # COALESCE –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–º–µ–Ω—ã NULL –Ω–∞ 0
            # NULLIF –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0
            sql_query = """
                SELECT AVG(COALESCE(salary_from, 0) + COALESCE(salary_to, 0)) / 
                       NULLIF(CASE 
                           WHEN salary_from IS NOT NULL AND salary_to IS NOT NULL THEN 2
                           WHEN salary_from IS NOT NULL OR salary_to IS NOT NULL THEN 1
                           ELSE 0
                       END, 0) as avg_salary
                FROM vacancies
                WHERE salary_from IS NOT NULL OR salary_to IS NOT NULL;
            """
            cur.execute(sql_query)
            avg_salary = cur.fetchone()[0]  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ 'get_avg_salary': {e}")
            avg_salary = None

        finally:
            if cur:
                cur.close()
            if conn:
                conn.close()

        return avg_salary

    def get_vacancies_with_higher_salary(self):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞—Ä–ø–ª–∞—Ç–∞ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π –ø–æ –≤—Å–µ–º –≤–∞–∫–∞–Ω—Å–∏—è–º.

        Returns:
            list: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –≤–∞–∫–∞–Ω—Å–∏–π —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π.
        """
        conn = None
        cur = None
        results = []

        try:
            conn = psycopg2.connect(**self.params)
            cur = conn.cursor()

            # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã
            sql_query = """
                WITH avg_salary AS (
                    SELECT AVG(COALESCE(salary_from, 0) + COALESCE(salary_to, 0)) / 
                           NULLIF(CASE 
                               WHEN salary_from IS NOT NULL AND salary_to IS NOT NULL THEN 2
                               WHEN salary_from IS NOT NULL OR salary_to IS NOT NULL THEN 1
                               ELSE 0
                           END, 0) as avg_value
                    FROM vacancies
                    WHERE salary_from IS NOT NULL OR salary_to IS NOT NULL
                )
                SELECT v.*, e.employer_name
                FROM vacancies v
                JOIN employers e ON v.employer_id = e.employer_id
                WHERE (
                    COALESCE(v.salary_from, 0) > (SELECT avg_value FROM avg_salary)
                    OR
                    COALESCE(v.salary_to, 0) > (SELECT avg_value FROM avg_salary)
                )
                AND (v.salary_from IS NOT NULL OR v.salary_to IS NOT NULL);
            """
            cur.execute(sql_query)
            results = cur.fetchall()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ 'get_vacancies_with_higher_salary': {e}")
            results = []

        finally:
            if cur:
                cur.close()
            if conn:
                conn.close()

        return results


def save_employers_to_db(employers_data, params):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è—Ö –≤ —Ç–∞–±–ª–∏—Ü—É 'employers'.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç ON CONFLICT DO NOTHING.
    """
    conn = None
    cur = None

    try:
        conn = psycopg2.connect(**params)
        cur = conn.cursor()

        insert_employer_sql = """
            INSERT INTO employers (employer_id, employer_name, employer_url)
            VALUES (%s, %s, %s)
            ON CONFLICT (employer_id) DO NOTHING;
        """
        for employer in employers_data:
            employer_id = employer.get('id')
            employer_name = employer.get('name')
            employer_url = employer.get('alternate_url')
            employer_values = (employer_id, employer_name, employer_url)
            cur.execute(insert_employer_sql, employer_values)

        conn.commit()

    except psycopg2.errors.UniqueViolation as e:
         print(f"‚ÑπÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –≤—Å—Ç–∞–≤–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è: {e}")
         if conn:
             conn.rollback()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π: {e}")
        if conn:
            conn.rollback()
    finally:
        if cur:
            cur.close()
        if conn:
            conn.close()


def save_vacancies_to_db(companies_data, params):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü—É 'vacancies'.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç ON CONFLICT DO NOTHING.

    Args:
        companies_data (list): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∫–æ–º–ø–∞–Ω–∏—è—Ö (–∫–∞–∫ –∏–∑ API),
                               –∫–∞–∂–¥—ã–π —Å–ª–æ–≤–∞—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π.
        params (dict): –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL.
    """
    conn = None
    cur = None

    try:
        conn = psycopg2.connect(**params)
        cur = conn.cursor()

        insert_vacancy_sql = """
            INSERT INTO vacancies (vacancy_id, employer_id, title, salary_from, salary_to, salary_currency, url)
            VALUES (%s, %s, %s, %s, %s, %s, %s)
            ON CONFLICT (vacancy_id) DO NOTHING;
        """

        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–ø–∞–Ω–∏—é –≤ —Å–ø–∏—Å–∫–µ
        for company_data in companies_data:
            employer_id = company_data.get('id') # –ü–æ–ª—É—á–∞–µ–º ID —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∫–æ–º–ø–∞–Ω–∏–∏ —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –∏ —á—Ç–æ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
            vacancies_list = company_data.get('vacancies')
            if not vacancies_list:
                continue # –ï—Å–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏

            # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–∞–∂–¥—É—é –≤–∞–∫–∞–Ω—Å–∏—é –≤ —Å–ø–∏—Å–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
            for vacancy in vacancies_list:
                vacancy_id = vacancy.get('id')
                title = vacancy.get('name') # –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –¥–∞–Ω–Ω—ã—Ö API - 'name'
                url = vacancy.get('alternate_url') # –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—Ä–ø–ª–∞—Ç–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                salary_data = vacancy.get('salary')
                salary_from = None
                salary_to = None
                salary_currency = None

                if salary_data: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ 'salary'
                    salary_from = salary_data.get('from')
                    salary_to = salary_data.get('to')
                    salary_currency = salary_data.get('currency')

                # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –∫–æ—Ä—Ç–µ–∂.
                # –ü–æ—Ä—è–¥–æ–∫ –î–û–õ–ñ–ï–ù —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –ø–æ—Ä—è–¥–∫–æ–º —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ INSERT!
                vacancy_values = (
                    vacancy_id,
                    employer_id, # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ü–∏–∫–ª–∞
                    title,
                    salary_from,
                    salary_to,
                    salary_currency,
                    url
                )

                # –í—ã–ø–æ–ª–Ω—è–µ–º SQL –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
                cur.execute(insert_vacancy_sql, vacancy_values)

        conn.commit()

    except psycopg2.errors.UniqueViolation as e:
         print(f"‚ÑπÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –≤—Å—Ç–∞–≤–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç –≤–∞–∫–∞–Ω—Å–∏–∏: {e}")
         if conn:
             conn.rollback()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π: {e}")
        if conn:
            conn.rollback()
    finally:
        if cur:
            cur.close()
        if conn:
            conn.close()

